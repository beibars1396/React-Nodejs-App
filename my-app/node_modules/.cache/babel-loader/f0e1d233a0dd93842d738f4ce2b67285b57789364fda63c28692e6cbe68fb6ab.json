{"ast":null,"code":"var _jsxFileName = \"/Users/ushbaybeibars/Documents/React-Nodejs-App/my-app/src/view/dashboard/TodoListTable.tsx\",\n  _s = $RefreshSig$();\nimport { Box, Table, TableBody, TableCell, TableHead, TableRow } from \"@mui/material\";\nimport { useSelector } from \"react-redux\";\nimport TableCellCustom from \"view/table/TableCellCustom\";\nimport selectors from 'modules/todolist/todolistSelectors';\nimport actions from 'modules/todolist/todolistActions';\nimport Spinner from \"view/shared/Spinner\";\nimport Pagination from \"view/table/Pagination\";\nimport { useAppDispatch } from \"modules/store\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TodoListTable() {\n  _s();\n  const dispatch = useAppDispatch();\n  const loading = useSelector(selectors.selectLoading);\n  const hasRows = useSelector(selectors.selectHasRows);\n  const sorter = useSelector(selectors.selectSorter);\n  const rows = useSelector(selectors.selectRows);\n  const pagination = useSelector(selectors.selectPagination);\n  const doChangeSort = field => {\n    console.log('log');\n    const order = sorter.field === field && field.order === 'asc' ? 'desc' : 'asc';\n    dispatch(actions.doChangeSort({\n      field,\n      order\n    }));\n  };\n  const doChangePagination = pagination => {\n    dispatch(actions.doChangePagination(pagination));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        display: \"block\",\n        width: '100%',\n        overflowX: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        style: {\n          borderRadius: '5px',\n          border: '1px solid rgb(224, 224, 224)',\n          borderCollapse: 'initial'\n        },\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCellCustom, {\n              onSort: doChangeSort,\n              hasRows: hasRows,\n              sorter: sorter,\n              name: 'userName',\n              label: 'Имя Пользователя'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TableCellCustom, {\n              onSort: doChangeSort,\n              hasRows: hasRows,\n              sorter: sorter,\n              name: 'createdByEmail',\n              label: 'Email'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TableCellCustom, {\n              onSort: doChangeSort,\n              hasRows: hasRows,\n              sorter: sorter,\n              name: 'TextTask',\n              label: 'Текст Задачи'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TableCellCustom, {\n              onSort: doChangeSort,\n              hasRows: hasRows,\n              sorter: sorter,\n              name: 'status',\n              label: 'статус'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: [loading && /*#__PURE__*/_jsxDEV(TableRow, {\n            children: /*#__PURE__*/_jsxDEV(TableCell, {\n              colSpan: 100,\n              children: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 29\n          }, this), !loading && !hasRows && /*#__PURE__*/_jsxDEV(TableRow, {\n            children: /*#__PURE__*/_jsxDEV(TableCell, {\n              colSpan: 100,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: 'flex',\n                  justifyContent: 'center'\n                },\n                children: \"\\u041F\\u0443\\u0441\\u0442\\u043E\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      onChange: doChangePagination,\n      disabled: loading,\n      pagination: pagination\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(TodoListTable, \"t0ZhTsvJBIg3JGXqG2FWz1fhgOY=\", false, function () {\n  return [useAppDispatch, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n_c = TodoListTable;\nvar _c;\n$RefreshReg$(_c, \"TodoListTable\");","map":{"version":3,"names":["Box","Table","TableBody","TableCell","TableHead","TableRow","useSelector","TableCellCustom","selectors","actions","Spinner","Pagination","useAppDispatch","jsxDEV","_jsxDEV","Fragment","_Fragment","TodoListTable","_s","dispatch","loading","selectLoading","hasRows","selectHasRows","sorter","selectSorter","rows","selectRows","pagination","selectPagination","doChangeSort","field","console","log","order","doChangePagination","children","style","display","width","overflowX","borderRadius","border","borderCollapse","onSort","name","label","fileName","_jsxFileName","lineNumber","columnNumber","colSpan","justifyContent","onChange","disabled","_c","$RefreshReg$"],"sources":["/Users/ushbaybeibars/Documents/React-Nodejs-App/my-app/src/view/dashboard/TodoListTable.tsx"],"sourcesContent":["import { Box, Table, TableBody, TableCell, TableHead, TablePagination, TableRow } from \"@mui/material\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport TableCellCustom from \"view/table/TableCellCustom\";\nimport selectors from 'modules/todolist/todolistSelectors';\nimport actions from 'modules/todolist/todolistActions';\nimport Spinner from \"view/shared/Spinner\";\nimport Pagination from \"view/table/Pagination\";\nimport { useAppDispatch } from \"modules/store\";\n\nexport default function TodoListTable(){\n    const dispatch = useAppDispatch();\n\n    const loading = useSelector(selectors.selectLoading);\n    const hasRows = useSelector(selectors.selectHasRows);\n    const sorter = useSelector(selectors.selectSorter);\n    const rows = useSelector(selectors.selectRows);\n    const pagination = useSelector(selectors.selectPagination);\n\n    const doChangeSort = (field) => {\n        console.log('log');\n        \n        const order = sorter.field === field && field.order === 'asc' ? 'desc' : 'asc'\n        dispatch(\n            actions.doChangeSort({\n                field,\n                order\n            })\n        )\n    } \n\n    const doChangePagination = (pagination) => {\n        dispatch(actions.doChangePagination(pagination));\n    };\n\n    return(\n        <>\n            <Box\n                style={{\n                    display: \"block\",\n                    width: '100%',\n                    overflowX: 'auto'\n                }}\n            >\n                <Table\n                    style={{\n                        borderRadius: '5px',\n                        border: '1px solid rgb(224, 224, 224)',\n                        borderCollapse: 'initial'\n                    }}\n                >\n                    <TableHead>\n                        <TableRow>\n                            <TableCellCustom\n                                onSort={doChangeSort}\n                                hasRows={hasRows}\n                                sorter={sorter}\n                                name={'userName'}\n                                label={'Имя Пользователя'}\n                            />\n                            <TableCellCustom\n                                onSort={doChangeSort}\n                                hasRows={hasRows}\n                                sorter={sorter}\n                                name={'createdByEmail'}\n                                label={'Email'}\n                            />\n                            <TableCellCustom\n                                onSort={doChangeSort}\n                                hasRows={hasRows}\n                                sorter={sorter}\n                                name={'TextTask'}\n                                label={'Текст Задачи'}\n                            />\n                            <TableCellCustom\n                                onSort={doChangeSort}\n                                hasRows={hasRows}\n                                sorter={sorter}\n                                name={'status'}\n                                label={'статус'}\n                            />\n                            {/* <TableCellCustom>\n                                Имя Пользователя\n                            </TableCellCustom>\n                            <TableCellCustom>\n                                Email\n                            </TableCellCustom>\n                            <TableCellCustom>\n                                Текст Задачи\n                            </TableCellCustom>\n                            <TableCellCustom>\n                                Статус\n                            </TableCellCustom> */}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {loading && (\n                            <TableRow>\n                                <TableCell colSpan={100}>\n                                    <Spinner />\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        {!loading && !hasRows && (\n                            <TableRow>\n                                <TableCell colSpan={100}>\n                                    <div\n                                        style={{\n                                            display: 'flex',\n                                            justifyContent: 'center'\n                                        }}\n                                    >\n                                        Пусто\n                                    </div>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                    </TableBody>\n                </Table>\n            </Box>\n            {/* <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={10}\n                page={pagination.current-1}\n                onPageChange={doChangePagination}\n                // onRowsPerPageChange={(event) =>\n                //     onChangeRowsPerPage(+event.target.value)}\n            /> */}\n            <Pagination\n                onChange={doChangePagination}\n                disabled={loading}\n                pagination={pagination}\n            />\n        </>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}