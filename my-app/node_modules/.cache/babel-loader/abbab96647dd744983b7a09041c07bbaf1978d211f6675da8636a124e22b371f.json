{"ast":null,"code":"import { createSelector } from 'reselect';\nimport AuthCurrentTenant from './authCurrentTenant';\nimport { tenantSubdomain } from '../tenant/tenantSubdomain';\nimport _get from 'lodash/get';\nconst selectRaw = state => state.auth;\nconst selectAuthenticationUser = createSelector([selectRaw], auth => auth.authenticationUser);\nconst selectCurrentUser = createSelector([selectRaw], auth => auth.currentUser);\nconst selectCurrentUserEmail = createSelector([selectCurrentUser], currentUser => currentUser ? currentUser.email : null);\nconst selectCurrentUserFullName = createSelector([selectCurrentUser], currentUser => currentUser ? currentUser.fullName : '');\nconst selectSignedIn = createSelector([selectCurrentUser], currentUser => Boolean(currentUser) && Boolean(currentUser.id));\nconst selectRoles = createSelector([selectCurrentUser], (currentUser, currentTenant) => {\n  if (!currentUser) {\n    return [];\n  }\n  if (!currentTenant) {\n    return [];\n  }\n  const tenantUser = currentUser.tenants.find(userTenant => userTenant.tenant.id === currentTenant.id);\n  if (!tenantUser) {\n    return [];\n  }\n  return tenantUser.roles;\n});\nconst selectAdmin = createSelector([selectRoles], roles => Boolean(roles[0] === 'admin'));\nconst selectHighPermissions = createSelector([selectRoles], roles => Boolean(roles[0] === 'admin'));\nconst selectLoading = createSelector([selectRaw], auth => Boolean(auth.loading));\nconst selectLoadingInit = createSelector([selectRaw], auth => Boolean(auth.loadingInit));\nconst selectLoadingEmailConfirmation = createSelector([selectRaw], auth => Boolean(auth.loadingEmailConfirmation));\nconst selectLoadingPasswordResetEmail = createSelector([selectRaw], auth => Boolean(auth.loadingPasswordResetEmail));\nconst selectLoadingPasswordReset = createSelector([selectRaw], auth => Boolean(auth.loadingPasswordReset));\nconst selectLoadingVerifyEmail = createSelector([selectRaw], auth => Boolean(auth.loadingVerifyEmail));\nconst selectLoadingPasswordChange = createSelector([selectRaw], auth => Boolean(auth.loadingPasswordChange));\nconst selectLoadingUpdateProfile = createSelector([selectRaw], auth => Boolean(auth.loadingUpdateProfile));\nconst selectErrorMessage = createSelector([selectRaw], auth => auth.errorMessage);\nconst selectErrorMessageVerifyEmail = createSelector([selectRaw], auth => auth.errorMessageVerifyEmail);\nconst selectCurrentUserNameOrEmailPrefix = createSelector([selectCurrentUser, selectCurrentUserFullName], (currentUser, fullName) => {\n  if (!currentUser) {\n    return '';\n  }\n  if (fullName && fullName.length < 25) {\n    return fullName;\n  }\n  if (currentUser.firstName) {\n    return currentUser.firstName;\n  }\n  return currentUser.email.split('@')[0];\n});\nconst selectCurrentUserAvatar = createSelector([selectCurrentUser], currentUser => {\n  if (!currentUser || !currentUser.avatars || !currentUser.avatars.length || !currentUser.avatars[0].downloadUrl) {\n    return null;\n  }\n  return currentUser.avatars[0].downloadUrl;\n});\nconst selectCurrentSettings = createSelector([],\n// The idea of this method is to refresh\n// where is using if the current tenant changes\ncurrentTenant => {\n  return AuthCurrentTenant.getSettings();\n});\nconst selectBackgroundImageUrl = createSelector([],\n// The idea of this method is to refresh\n// where is using if the current tenant changes\ncurrentTenant => {\n  if (tenantSubdomain.isEnabled && tenantSubdomain.isRootDomain) {\n    return null;\n  }\n  const settings = AuthCurrentTenant.getSettings();\n  return _get(settings, 'backgroundImageUrl', _get(settings, 'backgroundImages[0].downloadUrl', null));\n});\nconst selectLogoUrl = createSelector([],\n// The idea of this method is to refresh\n// where is using if the current tenant changes\ncurrentTenant => {\n  if (tenantSubdomain.isEnabled && tenantSubdomain.isRootDomain) {\n    return null;\n  }\n  const settings = AuthCurrentTenant.getSettings();\n  return _get(settings, 'logoUrl', _get(settings, 'logos[0].downloadUrl', null));\n});\nconst authSelectors = {\n  selectLoadingPasswordResetEmail,\n  selectLoadingEmailConfirmation,\n  selectLoadingInit,\n  selectLoadingUpdateProfile,\n  selectLoading,\n  selectRoles,\n  selectSignedIn,\n  selectCurrentUserFullName,\n  selectCurrentUserEmail,\n  selectCurrentUser,\n  selectAuthenticationUser,\n  selectErrorMessage,\n  selectErrorMessageVerifyEmail,\n  selectRaw,\n  selectCurrentUserNameOrEmailPrefix,\n  selectCurrentUserAvatar,\n  selectLoadingPasswordReset,\n  selectLoadingVerifyEmail,\n  selectLoadingPasswordChange,\n  selectCurrentSettings,\n  selectLogoUrl,\n  selectBackgroundImageUrl,\n  selectAdmin,\n  selectHighPermissions\n};\nexport default authSelectors;","map":{"version":3,"names":["createSelector","AuthCurrentTenant","tenantSubdomain","_get","selectRaw","state","auth","selectAuthenticationUser","authenticationUser","selectCurrentUser","currentUser","selectCurrentUserEmail","email","selectCurrentUserFullName","fullName","selectSignedIn","Boolean","id","selectRoles","currentTenant","tenantUser","tenants","find","userTenant","tenant","roles","selectAdmin","selectHighPermissions","selectLoading","loading","selectLoadingInit","loadingInit","selectLoadingEmailConfirmation","loadingEmailConfirmation","selectLoadingPasswordResetEmail","loadingPasswordResetEmail","selectLoadingPasswordReset","loadingPasswordReset","selectLoadingVerifyEmail","loadingVerifyEmail","selectLoadingPasswordChange","loadingPasswordChange","selectLoadingUpdateProfile","loadingUpdateProfile","selectErrorMessage","errorMessage","selectErrorMessageVerifyEmail","errorMessageVerifyEmail","selectCurrentUserNameOrEmailPrefix","length","firstName","split","selectCurrentUserAvatar","avatars","downloadUrl","selectCurrentSettings","getSettings","selectBackgroundImageUrl","isEnabled","isRootDomain","settings","selectLogoUrl","authSelectors"],"sources":["/Users/ushbaybeibars/Documents/React-Nodejs-App/my-app/src/modules/auth/authSelectors.tsx"],"sourcesContent":["import { createSelector } from 'reselect';\nimport AuthCurrentTenant from './authCurrentTenant';\nimport { tenantSubdomain } from '../tenant/tenantSubdomain';\nimport _get from 'lodash/get';\n\nconst selectRaw = (state) => state.auth;\n\nconst selectAuthenticationUser = createSelector(\n  [selectRaw],\n  (auth) => auth.authenticationUser,\n);\n\nconst selectCurrentUser = createSelector(\n  [selectRaw],\n  (auth) => auth.currentUser,\n);\n\nconst selectCurrentUserEmail = createSelector(\n  [selectCurrentUser],\n  (currentUser) => (currentUser ? currentUser.email : null),\n);\n\nconst selectCurrentUserFullName = createSelector(\n  [selectCurrentUser],\n  (currentUser) =>\n    currentUser ? currentUser.fullName : '',\n);\n\nconst selectSignedIn = createSelector(\n  [selectCurrentUser],\n  (currentUser) =>\n    Boolean(currentUser) && Boolean(currentUser.id),\n);\n\nconst selectRoles = createSelector(\n  [selectCurrentUser],\n  (currentUser, currentTenant) => {\n    if (!currentUser) {\n      return [];\n    }\n\n    if (!currentTenant) {\n      return [];\n    }\n\n    const tenantUser = currentUser.tenants.find(\n      (userTenant) =>\n        userTenant.tenant.id === currentTenant.id,\n    );\n\n    if (!tenantUser) {\n      return [];\n    }\n\n    return tenantUser.roles;\n  },\n);\n\nconst selectAdmin = createSelector(\n  [selectRoles],\n  (roles) => \n    Boolean(roles[0] === 'admin')\n);\n\nconst selectHighPermissions = createSelector(\n  [selectRoles],\n  (roles) => \n    Boolean(roles[0] === 'admin')\n);\n\nconst selectLoading = createSelector([selectRaw], (auth) =>\n  Boolean(auth.loading),\n);\n\nconst selectLoadingInit = createSelector(\n  [selectRaw],\n  (auth) => Boolean(auth.loadingInit),\n);\n\nconst selectLoadingEmailConfirmation = createSelector(\n  [selectRaw],\n  (auth) => Boolean(auth.loadingEmailConfirmation),\n);\n\nconst selectLoadingPasswordResetEmail = createSelector(\n  [selectRaw],\n  (auth) => Boolean(auth.loadingPasswordResetEmail),\n);\n\nconst selectLoadingPasswordReset = createSelector(\n  [selectRaw],\n  (auth) => Boolean(auth.loadingPasswordReset),\n);\n\nconst selectLoadingVerifyEmail = createSelector(\n  [selectRaw],\n  (auth) => Boolean(auth.loadingVerifyEmail),\n);\n\nconst selectLoadingPasswordChange = createSelector(\n  [selectRaw],\n  (auth) => Boolean(auth.loadingPasswordChange),\n);\n\nconst selectLoadingUpdateProfile = createSelector(\n  [selectRaw],\n  (auth) => Boolean(auth.loadingUpdateProfile),\n);\n\nconst selectErrorMessage = createSelector(\n  [selectRaw],\n  (auth) => auth.errorMessage,\n);\n\nconst selectErrorMessageVerifyEmail = createSelector(\n  [selectRaw],\n  (auth) => auth.errorMessageVerifyEmail,\n);\nconst selectCurrentUserNameOrEmailPrefix = createSelector(\n  [selectCurrentUser, selectCurrentUserFullName],\n  (currentUser, fullName) => {\n    if (!currentUser) {\n      return '';\n    }\n\n    if (fullName && fullName.length < 25) {\n      return fullName;\n    }\n\n    if (currentUser.firstName) {\n      return currentUser.firstName;\n    }\n\n    return currentUser.email.split('@')[0];\n  },\n);\n\nconst selectCurrentUserAvatar = createSelector(\n  [selectCurrentUser],\n  (currentUser) => {\n    if (\n      !currentUser ||\n      !currentUser.avatars ||\n      !currentUser.avatars.length ||\n      !currentUser.avatars[0].downloadUrl\n    ) {\n      return null;\n    }\n\n    return currentUser.avatars[0].downloadUrl;\n  },\n);\n\nconst selectCurrentSettings = createSelector(\n  [],\n  // The idea of this method is to refresh\n  // where is using if the current tenant changes\n  (currentTenant) => {\n    return AuthCurrentTenant.getSettings();\n  },\n);\n\nconst selectBackgroundImageUrl = createSelector(\n  [],\n  // The idea of this method is to refresh\n  // where is using if the current tenant changes\n  (currentTenant) => {\n    if (\n      tenantSubdomain.isEnabled &&\n      tenantSubdomain.isRootDomain\n    ) {\n      return null;\n    }\n\n    const settings = AuthCurrentTenant.getSettings();\n\n    return _get(\n      settings,\n      'backgroundImageUrl',\n      _get(\n        settings,\n        'backgroundImages[0].downloadUrl',\n        null,\n      ),\n    );\n  },\n);\n\nconst selectLogoUrl = createSelector(\n  [],\n  // The idea of this method is to refresh\n  // where is using if the current tenant changes\n  (currentTenant) => {\n    if (\n      tenantSubdomain.isEnabled &&\n      tenantSubdomain.isRootDomain\n    ) {\n      return null;\n    }\n\n    const settings = AuthCurrentTenant.getSettings();\n\n    return _get(\n      settings,\n      'logoUrl',\n      _get(settings, 'logos[0].downloadUrl', null),\n    );\n  },\n);\n\nconst authSelectors = {\n  selectLoadingPasswordResetEmail,\n  selectLoadingEmailConfirmation,\n  selectLoadingInit,\n  selectLoadingUpdateProfile,\n  selectLoading,\n  selectRoles,\n  selectSignedIn,\n  selectCurrentUserFullName,\n  selectCurrentUserEmail,\n  selectCurrentUser,\n  selectAuthenticationUser,\n  selectErrorMessage,\n  selectErrorMessageVerifyEmail,\n  selectRaw,\n  selectCurrentUserNameOrEmailPrefix,\n  selectCurrentUserAvatar,\n  selectLoadingPasswordReset,\n  selectLoadingVerifyEmail,\n  selectLoadingPasswordChange,\n  selectCurrentSettings,\n  selectLogoUrl,\n  selectBackgroundImageUrl,\n  selectAdmin,\n  selectHighPermissions,\n};\n\nexport default authSelectors;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}