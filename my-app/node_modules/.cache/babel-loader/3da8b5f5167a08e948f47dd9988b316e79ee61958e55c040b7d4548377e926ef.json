{"ast":null,"code":"export default class PermissionChecker {\n  constructor(currentTenant, currentUser) {\n    this.currentTenant = void 0;\n    this.currentUser = void 0;\n    this.currentTenant = currentTenant;\n    this.currentUser = currentUser;\n  }\n  get currentUserRolesIds() {\n    if (!this.currentUser || !this.currentUser.tenants) {\n      return [];\n    }\n    const tenant = this.currentUser.tenants.filter(tenantUser => tenantUser.status === 'active').find(tenantUser => tenantUser.tenant.id === this.currentTenant.id);\n    if (!tenant) {\n      return [];\n    }\n    return tenant.roles;\n  }\n  match(permission) {\n    if (!permission) {\n      return true;\n    }\n    return this.rolesMatchOneOf(permission.allowedRoles);\n  }\n  rolesMatchOneOf(arg) {\n    if (!this.currentUserRolesIds) {\n      return false;\n    }\n    if (!arg) {\n      return false;\n    }\n    if (Array.isArray(arg)) {\n      if (!arg.length) {\n        return false;\n      }\n      return arg.some(role => this.currentUserRolesIds.includes(role));\n    }\n    return this.currentUserRolesIds.includes(arg);\n  }\n  get isEmptyTenant() {\n    if (!this.isAuthenticated) {\n      return true;\n    }\n    if (!this.currentUser.tenants) {\n      return true;\n    }\n    return !this.currentUser.tenants.some(tenant => tenant.status === 'active');\n  }\n  get isEmptyPermissions() {\n    if (!this.isAuthenticated) {\n      return true;\n    }\n    if (!this.currentUser.tenants) {\n      return true;\n    }\n    const tenant = this.currentUser.tenants.find(tenant => tenant.status === 'active');\n    if (!tenant) {\n      return true;\n    }\n    return !tenant.roles || !tenant.roles.length;\n  }\n  get isAuthenticated() {\n    return Boolean(this.currentUser) && Boolean(this.currentUser.id);\n  }\n  get isEmailVerified() {\n    if (!this.isAuthenticated) {\n      return false;\n    }\n    return this.currentUser.emailVerified;\n  }\n}","map":{"version":3,"names":["PermissionChecker","constructor","currentTenant","currentUser","currentUserRolesIds","tenants","tenant","filter","tenantUser","status","find","id","roles","match","permission","rolesMatchOneOf","allowedRoles","arg","Array","isArray","length","some","role","includes","isEmptyTenant","isAuthenticated","isEmptyPermissions","Boolean","isEmailVerified","emailVerified"],"sources":["/Users/ushbaybeibars/Documents/React-Nodejs-App/my-app/src/modules/auth/permissionChecker.tsx"],"sourcesContent":["export default class PermissionChecker {\n    currentTenant;\n    currentUser;\n\n    constructor(currentTenant, currentUser) {\n        this.currentTenant = currentTenant;\n        this.currentUser = currentUser;\n    }\n\n    get currentUserRolesIds() {\n        if (!this.currentUser || !this.currentUser.tenants) {\n            return [];\n        }\n\n        const tenant = this.currentUser.tenants\n        .filter(\n            (tenantUser) => tenantUser.status === 'active',\n        )\n        .find(\n            (tenantUser) => tenantUser.tenant.id === this.currentTenant.id,\n        );\n\n        if (!tenant) {\n            return [];\n        }\n        \n        return tenant.roles;\n    }\n\n    match(permission) {\n        if (!permission) {\n            return true;\n        }\n        \n        return this.rolesMatchOneOf(permission.allowedRoles);\n    }\n\n    rolesMatchOneOf(arg) {\n        if (!this.currentUserRolesIds) {\n            return false;\n        }\n\n        if (!arg) {\n            return false;\n        }\n\n        if (Array.isArray(arg)) {\n            if (!arg.length) {\n                return false;\n            }\n\n            return arg.some((role) =>\n                this.currentUserRolesIds.includes(role),\n            );\n        }\n\n        return this.currentUserRolesIds.includes(arg);\n    }\n\n    get isEmptyTenant() {\n        if (!this.isAuthenticated) {\n            return true;\n        }\n\n        if (!this.currentUser.tenants) {\n            return true;\n        }\n\n        return !this.currentUser.tenants.some(\n            (tenant) => tenant.status === 'active',\n        );\n    }\n\n    get isEmptyPermissions() {\n        if (!this.isAuthenticated) {\n            return true;\n        }\n\n        if (!this.currentUser.tenants) {\n            return true;\n        }\n\n        const tenant = this.currentUser.tenants.find(\n            (tenant) => tenant.status === 'active',\n        );\n\n        if (!tenant) {\n            return true;\n        }\n\n        return !tenant.roles || !tenant.roles.length;\n    }\n\n    get isAuthenticated() {\n        return (\n            Boolean(this.currentUser) &&\n            Boolean(this.currentUser.id)\n        );\n    }\n\n    get isEmailVerified() {\n        if (!this.isAuthenticated) {\n            return false;\n        }\n\n        return this.currentUser.emailVerified;\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}