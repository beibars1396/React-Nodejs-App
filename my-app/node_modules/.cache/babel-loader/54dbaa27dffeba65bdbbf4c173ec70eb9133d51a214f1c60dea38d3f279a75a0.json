{"ast":null,"code":"import Errors from 'modules/shared/error/errors';\nimport TodolistService from './todolistService';\nimport Message from 'view/shared/message';\nimport selectors from './todolistSelectors';\n// import StatusesService from 'modules/statuses/statusesService';\n\nconst prefix = 'TODOLIST_LIST';\nconst todolistActions = {\n  TOGGLE_ONE_SELECTED: `${prefix}_TOGGLE_ONE_SELECTED`,\n  TOGGLE_ALL_SELECTED: `${prefix}_TOGGLE_ALL_SELECTED`,\n  CLEAR_ALL_SELECTED: `${prefix}_CLEAR_ALL_SELECTED`,\n  FETCH_STARTED: `${prefix}_FETCH_STARTED`,\n  FETCH_SUCCESS: `${prefix}_FETCH_SUCCESS`,\n  FETCH_ERROR: `${prefix}_FETCH_ERROR`,\n  PAGINATION_CHANGED: `${prefix}_PAGINATION_CHANGED`,\n  SORTER_CHANGED: `${prefix}_SORTER_CHANGED`,\n  EXPORT_STARTED: `${prefix}_EXPORT_STARTED`,\n  EXPORT_SUCCESS: `${prefix}_EXPORT_SUCCESS`,\n  EXPORT_ERROR: `${prefix}_EXPORT_ERROR`,\n  DESTROY_ALL_SELECTED_STARTED: `${prefix}_DESTROY_ALL_SELECTED_STARTED`,\n  DESTROY_ALL_SELECTED_SUCCESS: `${prefix}_DESTROY_ALL_SELECTED_SUCCESS`,\n  DESTROY_ALL_SELECTED_ERROR: `${prefix}_DESTROY_ALL_SELECTED_ERROR`,\n  DESTROY_STARTED: `${prefix}_DESTROY_STARTED`,\n  DESTROY_SUCCESS: `${prefix}_DESTROY_SUCCESS`,\n  DESTROY_ERROR: `${prefix}_DESTROY_ERROR`,\n  RESETED: `${prefix}_RESETED`,\n  doFetch: function (filter, rawFilter) {\n    let keepPagination = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    return async (dispatch, getState) => {\n      try {\n        dispatch({\n          type: todolistActions.FETCH_STARTED,\n          payload: {\n            filter,\n            rawFilter,\n            keepPagination\n          }\n        });\n        const response = await TodolistService.fetchTodolist(filter, selectors.selectOrderBy(getState()), selectors.selectLimit(getState()), selectors.selectOffset(getState()));\n        dispatch({\n          type: todolistActions.FETCH_SUCCESS,\n          payload: {\n            rows: response,\n            // rows: response.rows,\n            count: response.count\n          }\n        });\n      } catch (error) {\n        Errors.handle(error);\n        dispatch({\n          type: todolistActions.FETCH_ERROR\n        });\n      }\n    };\n  },\n  doClearAllSelected() {\n    return {\n      type: todolistActions.CLEAR_ALL_SELECTED\n    };\n  },\n  doReset: () => async dispatch => {\n    dispatch({\n      type: todolistActions.RESETED\n    });\n    dispatch(todolistActions.doFetch());\n  },\n  doDestroyAllSelected: () => async (dispatch, getState) => {\n    try {\n      const selectedRows = selectors.selectSelectedRows(getState());\n      dispatch({\n        type: todolistActions.DESTROY_ALL_SELECTED_STARTED\n      });\n      await TodolistService.destroy(selectedRows.map(row => row.id));\n      dispatch({\n        type: todolistActions.DESTROY_ALL_SELECTED_SUCCESS\n      });\n      Message.success('Успешно');\n      dispatch(todolistActions.doFetchCurrentFilter());\n    } catch (error) {\n      Errors.handle(error);\n      dispatch({\n        type: todolistActions.DESTROY_ALL_SELECTED_ERROR\n      });\n      dispatch(todolistActions.doFetchCurrentFilter());\n    }\n  },\n  doDestroy: id => async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: todolistActions.DESTROY_STARTED\n      });\n      await TodolistService.destroy([id]);\n      dispatch({\n        type: todolistActions.DESTROY_SUCCESS\n      });\n      Message.success('Успешно');\n      dispatch(todolistActions.doFetchCurrentFilter());\n    } catch (error) {\n      Errors.handle(error);\n      dispatch({\n        type: todolistActions.DESTROY_ERROR\n      });\n      dispatch(todolistActions.doFetchCurrentFilter());\n    }\n  },\n  doFetchCurrentFilter: () => async (dispatch, getState) => {\n    const filter = selectors.selectFilter(getState());\n    const rawFilter = selectors.selectRawFilter(getState());\n    dispatch(todolistActions.doFetch(filter, rawFilter, true));\n  },\n  doChangePagination: pagination => async (dispatch, getState) => {\n    dispatch({\n      type: todolistActions.PAGINATION_CHANGED,\n      payload: pagination\n    });\n    dispatch(todolistActions.doFetchCurrentFilter());\n  },\n  doToggleOneSelected(id) {\n    return {\n      type: todolistActions.TOGGLE_ONE_SELECTED,\n      payload: id\n    };\n  },\n  doToggleAllSelected() {\n    return {\n      type: todolistActions.TOGGLE_ALL_SELECTED\n    };\n  }\n};\nexport default todolistActions;","map":{"version":3,"names":["Errors","TodolistService","Message","selectors","prefix","todolistActions","TOGGLE_ONE_SELECTED","TOGGLE_ALL_SELECTED","CLEAR_ALL_SELECTED","FETCH_STARTED","FETCH_SUCCESS","FETCH_ERROR","PAGINATION_CHANGED","SORTER_CHANGED","EXPORT_STARTED","EXPORT_SUCCESS","EXPORT_ERROR","DESTROY_ALL_SELECTED_STARTED","DESTROY_ALL_SELECTED_SUCCESS","DESTROY_ALL_SELECTED_ERROR","DESTROY_STARTED","DESTROY_SUCCESS","DESTROY_ERROR","RESETED","doFetch","filter","rawFilter","keepPagination","arguments","length","undefined","dispatch","getState","type","payload","response","fetchTodolist","selectOrderBy","selectLimit","selectOffset","rows","count","error","handle","doClearAllSelected","doReset","doDestroyAllSelected","selectedRows","selectSelectedRows","destroy","map","row","id","success","doFetchCurrentFilter","doDestroy","selectFilter","selectRawFilter","doChangePagination","pagination","doToggleOneSelected","doToggleAllSelected"],"sources":["/Users/ushbaybeibars/Documents/React-Nodejs-App/my-app/src/modules/todolist/todolistActions.tsx"],"sourcesContent":["import Errors from 'modules/shared/error/errors';\nimport TodolistService from './todolistService';\nimport Message from 'view/shared/message';\nimport selectors from './todolistSelectors';\n// import StatusesService from 'modules/statuses/statusesService';\n\nconst prefix = 'TODOLIST_LIST';\n\nconst todolistActions = {\n    TOGGLE_ONE_SELECTED: `${prefix}_TOGGLE_ONE_SELECTED`,\n    TOGGLE_ALL_SELECTED: `${prefix}_TOGGLE_ALL_SELECTED`,\n    CLEAR_ALL_SELECTED: `${prefix}_CLEAR_ALL_SELECTED`,\n\n    FETCH_STARTED: `${prefix}_FETCH_STARTED`,\n    FETCH_SUCCESS: `${prefix}_FETCH_SUCCESS`,\n    FETCH_ERROR: `${prefix}_FETCH_ERROR`,\n\n    PAGINATION_CHANGED: `${prefix}_PAGINATION_CHANGED`,\n    SORTER_CHANGED: `${prefix}_SORTER_CHANGED`,\n\n    EXPORT_STARTED: `${prefix}_EXPORT_STARTED`,\n    EXPORT_SUCCESS: `${prefix}_EXPORT_SUCCESS`,\n    EXPORT_ERROR: `${prefix}_EXPORT_ERROR`,\n\n    DESTROY_ALL_SELECTED_STARTED: `${prefix}_DESTROY_ALL_SELECTED_STARTED`,\n    DESTROY_ALL_SELECTED_SUCCESS: `${prefix}_DESTROY_ALL_SELECTED_SUCCESS`,\n    DESTROY_ALL_SELECTED_ERROR: `${prefix}_DESTROY_ALL_SELECTED_ERROR`,\n\n    DESTROY_STARTED: `${prefix}_DESTROY_STARTED`,\n    DESTROY_SUCCESS: `${prefix}_DESTROY_SUCCESS`,\n    DESTROY_ERROR: `${prefix}_DESTROY_ERROR`,\n\n    RESETED: `${prefix}_RESETED`,\n\n    doFetch: (filter?, rawFilter?, keepPagination = false) => async (\n        dispatch,\n        getState,\n    ) => {\n        try {\n            dispatch({\n                type: todolistActions.FETCH_STARTED,\n                payload: { filter, rawFilter, keepPagination },\n            });\n\n            const response = await TodolistService.fetchTodolist(\n                filter,\n                selectors.selectOrderBy(getState()),\n                selectors.selectLimit(getState()),\n                selectors.selectOffset(getState()),\n            );\n\n            dispatch({\n                type: todolistActions.FETCH_SUCCESS,\n                payload: {\n                    rows: response,\n                    // rows: response.rows,\n                    count: response.count,\n                },\n            });\n        } catch (error) {\n            Errors.handle(error);\n\n            dispatch({\n                type: todolistActions.FETCH_ERROR,\n            });\n        }\n    },\n\n    doClearAllSelected() {\n        return {\n            type: todolistActions.CLEAR_ALL_SELECTED,\n        };\n    },\n\n    doReset: () => async (dispatch) => {\n        dispatch({\n          type: todolistActions.RESETED,\n        });\n\n        dispatch(todolistActions.doFetch());\n    },  \n\n    doDestroyAllSelected: () => async (\n        dispatch,\n        getState,\n    ) => {\n        try {\n          const selectedRows = selectors.selectSelectedRows(\n            getState(),\n          );\n\n          dispatch({\n            type: todolistActions.DESTROY_ALL_SELECTED_STARTED,\n          });\n\n          await TodolistService.destroy(\n            selectedRows.map((row) => row.id),\n          );\n\n          dispatch({\n            type: todolistActions.DESTROY_ALL_SELECTED_SUCCESS,\n          });\n\n          Message.success(\n            'Успешно',\n          );\n\n          dispatch(todolistActions.doFetchCurrentFilter());\n        } catch (error) {\n          Errors.handle(error);\n\n          dispatch({\n            type: todolistActions.DESTROY_ALL_SELECTED_ERROR,\n          });\n\n          dispatch(todolistActions.doFetchCurrentFilter());\n        }\n    },\n\n    doDestroy: (id) => async (dispatch, getState) => {\n        try {\n            dispatch({\n                type: todolistActions.DESTROY_STARTED,\n            });\n\n            await TodolistService.destroy([id]);\n\n            dispatch({\n                type: todolistActions.DESTROY_SUCCESS,\n            });\n\n            Message.success('Успешно');\n\n            dispatch(todolistActions.doFetchCurrentFilter());\n        } catch (error) {\n            Errors.handle(error);\n\n            dispatch({\n                type: todolistActions.DESTROY_ERROR,\n            });\n\n            dispatch(todolistActions.doFetchCurrentFilter());\n        }\n    },\n\n    doFetchCurrentFilter: () => async (\n        dispatch,\n        getState,\n    ) => {\n        const filter = selectors.selectFilter(getState());\n        const rawFilter = selectors.selectRawFilter(getState());\n        dispatch(todolistActions.doFetch(filter, rawFilter, true));\n    },\n\n    doChangePagination: (pagination) => async (\n        dispatch,\n        getState,\n    ) => {\n        dispatch({\n            type: todolistActions.PAGINATION_CHANGED,\n            payload: pagination,\n        });\n\n        dispatch(todolistActions.doFetchCurrentFilter());\n    },\n\n    doToggleOneSelected(id) {\n        return {\n            type: todolistActions.TOGGLE_ONE_SELECTED,\n            payload: id,\n        };\n    },\n\n    doToggleAllSelected() {\n        return {\n            type: todolistActions.TOGGLE_ALL_SELECTED,\n        };\n    },\n}\n\nexport default todolistActions;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}